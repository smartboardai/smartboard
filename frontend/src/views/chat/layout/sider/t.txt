<script setup lang='ts'>
import {
  ref,
  onMounted,
  computed,
  reactive
} from 'vue'
import {
  NCollapse,
  NBadge,
  NAvatar,
  NCollapseItem,
  NScrollbar,
  NSkeleton,
  NSpace,
  NButton,
  useMessage
} from 'naive-ui'
import {
  SvgIcon
} from '@/components/common'
import {
  useIconRender
} from '@/hooks/useIconRender';
import {
  t
} from '@/locales';
import {
  useBasicLayout
} from '@/hooks/useBasicLayout';
import ElementConv from './ElementConv.vue'
import {
  useAppStore,
  useChatStore
} from '@/store';
import {
  extractUrlParams
} from '@/utils/functions/index'

const {
  iconRender
} = useIconRender()
const {
  isMobile
} = useBasicLayout()
const appStore = useAppStore()
const chatStore = useChatStore()
const message = useMessage()

const errorGetData = ref<boolean>(false)


const handleUpdateValue = (key: string) => {
  const convId = key;
  chatStore.handelSelectAction(convId);
  if (isMobile.value) {
    appStore.setSiderCollapsed(true);
  }
}


const pageSize = reactive<{ [K in PublicApp.TypeService]: number }>({
  text: 10,
  image: 10,
  research: 10,
  video: 10,
  audio: 10,
  AI: 10,
  "Agri-Expert": 10,
});

const itemCount = reactive<{ [K in PublicApp.TypeService]: number }>({
  text: 0,
  image: 0,
  research: 0,
  video: 0,
  audio: 0,
  AI: 0,
  "Agri-Expert": 0,
});

const pagination = reactive<{ [K in PublicApp.TypeService]: { page: number; pageCount: number } }>({
  text: { page: 1, pageCount: 1 },
  image: { page: 1, pageCount: 1 },
  research: { page: 1, pageCount: 1 },
  video: { page: 1, pageCount: 1 },
  audio: { page: 1, pageCount: 1 },
  AI: { page: 1, pageCount: 1 },
  "Agri-Expert": { page: 1, pageCount: 1 },
});

// Computed properties for data sources
const dataSources = reactive<{ [K in PublicApp.TypeService]: ReturnType<typeof computed> }>({
  text: computed(() => getDataSources('text')),
  image: computed(() => getDataSources('image')),
  research: computed(() => getDataSources('research')),
  video: computed(() => getDataSources('video')),
  audio: computed(() => getDataSources('audio')),
  AI: computed(() => getDataSources('AI')),
  "Agri-Expert": computed(() => getDataSources('Agri-Expert')),
});

// Function to get data sources based on TypeService
function getDataSources(type: PublicApp.TypeService) {
  const start = (pagination[type].page - 1) * pageSize[type];
  const end = start + pageSize[type];
  return chatStore.listConversation.filter(conv => conv.type === type).slice(start, end);
}

// Computed property to update pagination count based on itemCount
typeServices.forEach(type => {
  pagination[type].pageCount = computed(() => Math.ceil(itemCount[type] / pageSize[type])).value;
});

const labelTextChat = computed(() => t('chat.chatAI'))
// const labelImageChat = computed(() => t('chat.chatImage'))
const labelResearchChat = computed(() => t('chat.agriExpert'))


const loadMoreLoading = ref<boolean>(false)

async function fetchData( type?: PublicApp.TypeService ) {
  try {
    const { page, pageSize } = pagination;

    await chatStore.getListConversationAction({ limit: pageSize, offset: (page - 1) * pageSize, type: type });
  
  } catch (error: any) {
    message.error(t('chat.errorGetData', error.message));
    throw error;
  }
}

async function initData(type: PublicApp.TypeService) {
  try {
    if (type === 'text') {
      chatStore.loadingConversationsText = true;
    } else if (type === 'image') {
      chatStore.loadingConversationsImage = true;
    } else if (type === 'research') {
      chatStore.loadingConversationsResearch = true;
    }
    await fetchData({ type: type });
    errorGetData.value = false;
  } catch (error: any) {
    errorGetData.value = true;
    console.error("Error initializing data:", error);
  } finally {
    if (type === 'text') {
      chatStore.loadingConversationsText = false;
    } else if (type === 'image') {
      chatStore.loadingConversationsImage = false;
    } else if (type === 'research') {
      chatStore.loadingConversationsResearch = false;
    }
  }
}

async function loadMore(type: PublicApp.TypeService) {
  let next;
  let offset;
  if (type === 'text') {
    next = nextText.value
    offset = nextOffsetText.value || 1
  } 
  // else if (type === 'image') {
  //   next = nextImage.value
  //   offset = nextOffsetImage.value || 1
  // } else if (type === 'research') {
  //   next = nextResearch.value
  //   offset = nextOffsetResearch.value || 1
  // }

  if (next) {
    try {
      loadMoreLoading.value = true;
      await fetchData({ offset: offset, type: type });
    } catch (error: any) {
      console.error("Error loading more data:", error);
    } finally {
      loadMoreLoading.value = false;
    }
  }
}

function getBothType() {

  initData('text');
  initData('Agri-Expert');

}

onMounted(async () => {
  getBothType()
});

const groupByDate = (conversations: any) => {
  const today = new Date().toLocaleDateString();
  const yesterday = new Date(new Date().setDate(new Date().getDate() - 1)).toLocaleDateString();

  // Translation object for date labels
  const dateLabels = {
    today: t('chat.today'),
    yesterday: t('chat.yesterday'),
    previous7Days: t('chat.previous7Days'),

  };

  const pinnedConversations = filterConversationByPin(conversations);
  const nonPinnedConversations = filterConversationByNotPin(conversations);

  const groupedByDate = nonPinnedConversations.reduce((groups, conversation) => {
    const conversationDate = new Date(conversation.updatedAt).toLocaleDateString();
    const key =
      conversationDate === today ? dateLabels.today :
        conversationDate === yesterday ? dateLabels.yesterday :
          dateLabels.previous7Days;

    if (!groups[key]) {
      groups[key] = [];
    }

    groups[key].push({
      label: conversation.title,
      key: conversation.id,
      disabled: false,
    });

    return groups;
  }, {});

  const sortOrder = [dateLabels.today, dateLabels.yesterday, dateLabels.previous7Days];

  const sortedGroups = sortOrder
    .filter(label => groupedByDate[label]?.length > 0)
    .map(label => ({
      type: 'group',
      label,
      key: label.toLowerCase().replace(' ', '-'),
      children: groupedByDate[label] || [],
    }));

  const pinnedGroup = pinnedConversations.length > 0 ? {
    type: 'group',
    label: t('chat.pinned'),
    key: 'pinned',
    children: pinnedConversations.map(conversation => ({
      label: conversation.title,
      key: conversation.id,
      disabled: false,
    })),
  } : null;

  return pinnedGroup ? [pinnedGroup, ...sortedGroups] : sortedGroups;
};

const menuOptions = computed(() => {
  const textChatOptions =  groupByDate(filterConversationByType('AI'));
  const agriChatOptions = groupByDate(filterConversationByType('Agri-Expert'));
  // const imageChatOptions = groupByDate(filterConversationByType('image'));
  // const favoriteChatOptions = groupByDate(filterConversationByFavorite());

  const options = [{
    label: labelTextChat.value,
    key: 'AI',
    icon: iconRender({
      icon: 'material-symbols:chat'
    }),
    disabled: false,
    children: textChatOptions,
  },
    {
      label: labelResearchChat.value,
      key: 'Agri-Expert',
      icon: iconRender({ icon: 'raphael:paper' }),
      disabled: false,
      children: agriChatOptions,
    },
    // {
    //   label: labelImageChat.value,
    //   key: 'image',
    //   icon: iconRender({
    //     icon: 'line-md:image'
    //   }),
    //   disabled: false,
    //   children: imageChatOptions,
    // },
    // {
    //   label: 'Favorite',
    //   key: 'favorite-chat',
    //   disabled: false,
    //   icon: iconRender({
    //     icon: 'mdi:book-favorite'
    //   }),
    //   children: favoriteChatOptions,
    // },
  ];
  return options.filter(option => option.children.length > 0);
});

const getConversationById = (convId: string) => {
  const conversation = chatStore.listConversation.find((conv) => conv.id === convId);
  return conversation || null;
};

const type = computed(() => chatStore.currentConversation.type);

// Helper functions
function filterConversationByType(type: PublicApp.TypeService) {
  return dataSources.value.filter((conversation) => conversation.type === type);
}

function filterConversationByPin(conversations: any) {
  return conversations.filter(conversation => conversation.isPin);
}

function filterConversationByNotPin(conversations: any) {
  return conversations.filter(conversation => !conversation.isPin);
}

function filterConversationByFavorite() {
  return dataSources.value.filter((conversation) => conversation.isFavorite);
}

function getIcon(option: PublicApp.TypeService) {
  // Default icon in case option.key is not recognized
  let icon = '';

  // Check the value of option.key and set the corresponding icon
  if (option === 'text') {
    icon = 'material-symbols:chat';
  } else if (option === 'image') {
    icon = 'material-symbols:image';
  }
  else if (option === 'research') {
    icon = 'raphael:paper';
  }

  return icon;
}

function getCountBadge(type: PublicApp.TypeService) {
  switch (type) {
    case 'text':
      return lengthListChatText.value
      break
    // case 'image':
    //   return lengthListChatImage.value
    //   break
    // case 'research':
    //   return lengthListChatResearch.value
    //   break
  }
}
</script>

<template>
  <NSpace
    class="px-2 py-2 glass bg-white dark:bg-purple-900"
    vertical
    v-if="loadingConversations"
  >
    <template
      v-for="_ in 30"
      :key="item"
    >
      <NSkeleton
        height="2rem"
        class="mx-1 py-1 md:py-[0.2rem] rounded-2xl"
      />
    </template>
  </NSpace>

  <template v-else>

    <template v-if="errorGetData">
      <div class="flex flex-col justify-center items-center gap-2 text-center bg-red-50 dark:bg-purple-900 h-full">
        <div class="text-error text-xl font-bold"> {{ t('common.errorSomeThing') }}</div>
        <button
          @click="getBothType()"
          class=" w-36 flex bg-error text-white  justify-center items-center gap-2 p-1  border border-gray-200 rounded-lg  dark:border-gray-700"
        >
          <SvgIcon
            class="bounce-in-fwd"
            icon="pajamas:retry"
          />
          <div class="font-bold text-base ">{{ t('common.tryAgain') }}</div>


        </button>
      </div>
     {{dataSources}}
    </template>

    <template v-if="!dataSources.length && !errorGetData">
      <div class="flex flex-col justify-center items-center mt-4 text-center bg-white dark:bg-purple-900 h-full">
        <SvgIcon
          icon="ri:inbox-line"
          class="mb-8 text-3xl"
        />
        <span>{{ $t('common.noData') }}</span>
      </div>
    </template>

    <template v-else>

      <NScrollbar class="bg-white dark:bg-purple-900 px-2 py-2">
        <NCollapse
          :default-expanded-names="type"
          accordion
          v-if="menuOptions.length > 0"
          class="py-2"
        >


          <NCollapseItem
            class="px-2"
            v-for="(option, index) in menuOptions"
            :key="index"
            :title="option.label"
            :name="option.key"
          >
            <template #header-extra>
              <div class="pr-4">
                <NBadge
                  :value="getCountBadge(option.key as PublicApp.TypeService)"
                  type="info"
                  :max="99"
                >
                  <NAvatar
                    color="white"
                    size="small"
                  >
                    <SvgIcon
                      :icon="getIcon(option.key)"
                      class="text-black w-5 h-5"
                    />
                  </NAvatar>

                </NBadge>

              </div>


            </template>




           <div class="flex flex-col gap-2 item-center justify-center">
           
            <div
                v-if="option.children && option.children.length > 0"
                v-for="(child, childIndex) in option.children"
                :key="childIndex"
              >
              <!-- <ElementConv :element="getConversationById(child.id)!" /> -->
                <div class="text-sm text-primary dark:text-white p-1">{{ child.label }}</div>
                <template v-for="(subChild, subChildIndex) in child.children">
                  <div
                    class="my-1"
                    @click="handleUpdateValue(subChild.key)"
                  >

                    <ElementConv :element="getConversationById(subChild.key)!" />
                  </div>
                </template>
              </div> 

              <div class="pt-2 flex justify-center">
                <NButton
                  v-if="(option.key === 'text' && nextText) || (option.key === 'image' && nextImage) || (option.key === 'research' && nextResearch)"
                  type="primary"
                  size="small"
                  :loading="loadMoreLoading"
                  @click="loadMore(option.key)"
                  class="w-full"
                >
                  <div class="font-bold text-base">{{ t('common.loadMore') }}</div>

                </NButton>
              </div>

            </div>

          </NCollapseItem>

        </NCollapse>
      </NScrollbar>


    </template>

  </template>
</template>


<!-- <script setup lang='ts'>
import { ref, onMounted, computed } from 'vue'
import { NCollapse, NBadge, NAvatar, NCollapseItem, NScrollbar, NSkeleton, NSpace, NButton, useMessage } from 'naive-ui'
import { SvgIcon } from '@/components/common'
import { useIconRender } from '@/hooks/useIconRender';
import { t } from '@/locales';
import { useBasicLayout } from '@/hooks/useBasicLayout';
import ElementConv from './ElementConv.vue'
import { useAppStore, useChatStore } from '@/store';
import { extractUrlParams } from '@/utils/functions/index'
const { iconRender } = useIconRender()
const { isMobile } = useBasicLayout()
const appStore = useAppStore()
const errorGetData = ref<boolean>(false)
async function handleUpdateValue(key: string) {
  const convId = key;
  chatStore.handelSelectAction(convId);
  if (isMobile.value) {
    appStore.setSiderCollapsed(true);
  }

}


const message = useMessage()

const labelTextChat = computed(() => t('chat.chatText'))
const labelImageChat = computed(() => t('chat.chatImage'))
const loadingConversations = computed(() => chatStore.loadingConversationsText && chatStore.loadingConversationsImage)
const chatStore = useChatStore()
const dataSources = computed(() => chatStore.listConversation)
const loadMoreLoading = ref<boolean>(false)

const lengthListChatText = computed(() =>chatStore.listConversation.filter((conversation) => conversation.type === 'text').length)
const lengthListChatImage = computed(() => chatStore.listConversation.filter((conversation) => conversation.type === 'image').length)
const totalCountText = ref<number>(lengthListChatText.value)
const nextText = ref<string | null>(null)

const totalCountImage = ref<number>(lengthListChatImage.value)
const nextImage = ref<string | null>(null)

const nextOffsetText = computed(() => extractUrlParams(nextText.value!).offset as unknown as number)
const nextOffsetImage = computed(() => extractUrlParams(nextImage.value!).offset as unknown as number)
async function fetchData({ limit = 20, offset = 1, type = 'text' }: { limit?: number; offset?: number, type?: PublicApp.TypeService } = {}) {
  try {
    const result = await chatStore.getListConversationAction({ offset: offset, type: type });
    if (type === 'text') {
      totalCountText.value = result.count;
      nextText.value = result.next;
    }
    else {
      totalCountImage.value = result.count;
      nextImage.value = result.next;
    }
  } catch (error: any) {
    message.error(t('chat.errorGetData', error.message));

    throw error;
  }
}
async function initData(type: PublicApp.TypeService) {
  try {
    if (type === 'text') {
      chatStore.loadingConversationsText = true;
    } else {
      chatStore.loadingConversationsImage = true;
    }
    await fetchData({ type: type });
  } catch (error: any) {
    errorGetData.value = true;

    console.error("Error initializing data:", error);
  }
  finally {
    if (type === 'text') {
      chatStore.loadingConversationsText = false;
    } else {
      chatStore.loadingConversationsImage = false;
    }
  }
}

async function loadMore(type: PublicApp.TypeService) {
  let next;
  let offset;
  if (type === 'text') {
    next = nextText.value
    offset = nextOffsetText.value || 1;
  } else {
    next = nextImage.value
    offset = nextOffsetImage.value || 1
  }
  if (next) {
    try {
      loadMoreLoading.value = true;
      await fetchData({ offset: offset, type: type });
    } catch (error: any) {
      console.error("Error loading more data:", error);
    } finally {
      loadMoreLoading.value = false;
    }
  }
}
function getBothType() {
  initData('image');
  initData('text');
}
onMounted(async () => {
  getBothType()
});


const groupByDate = (conversations:any) => {
  const today = new Date().toLocaleDateString();
  const yesterday = new Date(new Date().setDate(new Date().getDate() - 1)).toLocaleDateString();

  const pinnedConversations = conversations.filter(conversation => conversation.isPin);
  const nonPinnedConversations = conversations.filter(conversation => !conversation.isPin);

  const groupedByDate = nonPinnedConversations.reduce((groups, conversation) => {
    const conversationDate = new Date(conversation.updatedAt).toLocaleDateString();
    const key =
      conversationDate === today ? 'Today' :
        conversationDate === yesterday ? 'Yesterday' :
          'Previous 7 Days';

    if (!groups[key]) {
      groups[key] = [];
    }

    groups[key].push({
      label: conversation.title,
      key: conversation.id,
      disabled: false,
    });

    return groups;
  }, {});

  const sortOrder = ['Today', 'Yesterday', 'Previous 7 Days'];

  const sortedGroups = sortOrder
    .filter(label => groupedByDate[label]?.length > 0)
    .map(label => ({
      type: 'group',
      label,
      key: label.toLowerCase().replace(' ', '-'),
      children: groupedByDate[label] || [],
    }));

  const pinnedGroup = pinnedConversations.length > 0 ? {
    type: 'group',
    label: 'Pinned',
    key: 'pinned',
    children: pinnedConversations.map(conversation => ({
      label: conversation.title,
      key: conversation.id,
      disabled: false,
    })),
  } : null;

  return pinnedGroup ? [pinnedGroup, ...sortedGroups] : sortedGroups;
};






const menuOptions = computed(() => {
  const textChatOptions = groupByDate(dataSources.value.filter((conversation) => conversation.type === 'text'));
  const imageChatOptions = groupByDate(dataSources.value.filter((conversation) => conversation.type === 'image'));
  const favoriteChatOptions = groupByDate(dataSources.value.filter((conversation) => conversation.isFavorite));

  const options = [

    {
      label: labelTextChat.value,
      key: 'text',
      icon: iconRender({ icon: 'material-symbols:chat' }),
      disabled: false,
      children: textChatOptions,
    },
    {
      label: labelImageChat.value,
      key: 'image',
      icon: iconRender({ icon: 'line-md:image' }),
      disabled: false,
      children: imageChatOptions,
    },
    {
      label: 'Favorite Chat',
      key: 'favorite-chat',
      disabled: false,
      icon: iconRender({ icon: 'mdi:book-favorite' }),
      children: favoriteChatOptions,
    },
  ];
  return options.filter(option => option.children.length > 0);
});
const getConversationById = (convId: string) => {
  const conversation = dataSources.value.find((conv) => conv.id === convId);
  return conversation || null;
};
const type = computed(() => chatStore.currentConversation.type)
</script>

<template>
  <NSpace
    class="px-2 py-2 glass bg-white"
    vertical
    v-if="loadingConversations"
  >
    <template
      v-for="_ in 30"
      :key="item"
    >
      <NSkeleton
        height="2rem"
        class="mx-1 py-1 md:py-[0.2rem] rounded-2xl"
      />
    </template>
  </NSpace>

  <template v-else>

    <template v-if="errorGetData">
      <div class="flex flex-col justify-center items-center gap-2 text-center bg-red-50 h-full">
        <div class="text-error text-xl font-bold"> {{ t('common.errorSomeThing') }}</div>
        <button
          @click="getBothType()"
          class=" w-36 flex bg-error text-white  justify-center items-center gap-2 p-1  border border-gray-200 rounded-lg  dark:border-gray-700"
        >
          <SvgIcon
            class="bounce-in-fwd"
            icon="pajamas:retry"
          />
          <div class="font-bold text-base ">{{ t('common.tryAgain') }}</div>


        </button>
      </div>
    </template>

    <template v-if="!dataSources.length && !errorGetData">
      <div class="flex flex-col justify-center items-center mt-4 text-center bg-white h-full">
        <SvgIcon
          icon="ri:inbox-line"
          class="mb-8 text-3xl"
        />
        <span>{{ $t('common.noData') }}</span>
      </div>
    </template>

    <template v-else>

      <NScrollbar class="bg-white px-2 py-2">
        <NCollapse
          :default-expanded-names="type"
          accordion
          v-if="menuOptions.length > 0"
          class="py-2"
        >


          <NCollapseItem
            class="px-2"
            v-for="(option, index) in menuOptions"
            :key="index"
            :title="option.label"
            :name="option.key"
          >
            <template #header-extra>
<div class="pr-4">
              <NBadge
                :value="option.key === 'text' ? lengthListChatText: lengthListChatImage"
                type="info"
                :max="99"
              
              >
                <NAvatar
              color="white"
                  size="small"
                >
                  <SvgIcon
                    :icon="option.key === 'text' ? 'material-symbols:chat' : (option.key === 'image' ? 'material-symbols:image' : '')"
                    class="text-black w-5 h-5"
                  />
                </NAvatar>

              </NBadge>

            </div>


            </template>




            <div class="flex flex-col gap-2 item-center justify-center">
              <div
                v-if="option.children && option.children.length > 0"
                v-for="(child, childIndex) in option.children"
                :key="childIndex"
              >

                <div class="text-sm text-primary p-1">{{ child.label }}</div>
                <template v-for="(subChild, subChildIndex) in child.children">
                  <div
                    class="my-1"
                    @click="handleUpdateValue(subChild.key)"
                  >
                    <ElementConv :item="getConversationById(subChild.key)" />
                  </div>
                </template>
              </div>

              <div class="pt-2 flex justify-center">
                <NButton
                  v-if="(option.key === 'text' && nextText) || (option.key === 'image' && nextImage)"
                  type="primary"
                  size="small"
                  :loading="loadMoreLoading"
                  @click="loadMore(option.key)"
                  class="w-full"
                >
                  <div class="font-bold text-base">{{ t('common.loadMore') }}</div>

                </NButton>
              </div>

            </div>

          </NCollapseItem>

        </NCollapse>
      </NScrollbar>


    </template>

</template></template> -->
